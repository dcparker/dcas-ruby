= Functions of DCAS:

* Generate a file
* Upload a file
* Check for response files
* Receive response files
* Parse response files

=== First you must set up the login info and a cache location
  angola = DCAS::Client.new(:username => 'angola', :password => '4ng014', :cache_location => './EFT')

=== Create a Payment Batch
  ach_payments = angola.new_batch(batch_id)
  cc_payments  = angola.new_batch(batch_id)

=== Populate it with payments
  ach_payments << DCAS::AchPayment.new(client_id, client_name, amount, account_type, routing_number, account_number, check_number)
  cc_payments  << DCAS::CreditCardPayment.new(client_id, client_name, amount, card_type, credit_card_number, expiration)

=== You can generate a payments file from a collection of DCAS::Payment objects
  File.open(filename,     'w') {|f| f << cc_payments.to_csv }
  File.open(ach_filename, 'w') {|f| f << ach_payments.to_csv }

=== Upload a generated file to the payments folder of a DCAS bucket
  angola.submit_payments_file!(filename)

=== Simpler method, just submit batches in one go
  angola.submit_batches!

=== Check for response file availability and return the available filenames
  response_filenames = angola.available_response_files
  response_filename = response_filenames.first

=== Download all response files
  angola.download_response_files!
  response_file_content = File.read(angola.cache_location + '/' + response_filename)

=== Return an array of DCAS::Response objects parsed from the response file/content
  responses = DCAS.parse_response_file(response_filename)
  responses = DCAS.parse_response_file(response_file_content)

=== Run the block for each DCAS::Response in the response file/content
  angola.each_response_in(response_filename) { |response| ... }
  angola.each_response_in(response_file_content) { |response| ... }
